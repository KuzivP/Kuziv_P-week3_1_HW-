в 1996г. я направился на запад, в компанию JavaSoft, как она тогда называлась, поскольку было
очевидно, что именно там происходят главные события. На протяжении пяти лет я работал
архитектором библиотек для платформы Java. Я занимался проектированием, разработкой и
обслуживанием этих библиотек, а также давал консультации по многим другим библиотекам. Контроль
над библиотеками в ходе становления платформы языка Java - такая возможность предоставляется
раз в жизни. Не будет преувеличением сказать, что я имел честь трудиться бок о бок с великими
разработчиками нашего времени. Я многое узнал о языке программирования Java: что в нем работает,
а что нет, как пользоваться языком и его библиотеками для получения наилучшего результата.
Эта книга является попыткой поделиться с вами моим опытом, чтобы вы смогли повторить мои
успехи и избежать моих неудач. Оформление книги я позаимствовал из руководства Скотта Мейерса
(Scott Meyers) "Effective С++["M eyers98]; оно состоит из пятидесяти статей, каждая из которых посвящена
одному конкретному правилу, направленному на улучшение программ и проектов. Я нашел такое
оформление необычайно эффективным, и надеюсь, вы тоже его оцените.
Во многих случаях я иллюстрирую статьи реальными примерами из библиотек для платформы
Java. Говоря, что нечто можно сделать лучше, я старался брать программный код, который писал сам,
однако иногда я пользовался разработками коллег. Приношу мои искренние извинения, если, не желая
того, обидел кого-либо. Негативные примеры приведены не для того, чтобы кого-то опорочить, а с
целью сотрудничества, чтобы все мы могли извлечь пользу из опыта тех, кто уже прошел этот путь.
Эта книга предназначена не только для тех, кто занимается разработкой повторно используемых
компонентов, тем не менее она неизбежно отражает мой опыт в написании таковых, накопленный за
последние два десятилетия. Я привык думать в терминах прикладных интерфейсов (API) и предлагаю
вам делать то же. Даже если вы не занимаетесь разработкой повторно используемых компонентов,
применение этих терминов поможет вам повысить качество ваших программ. Более того, нередко
случается писать многократно используемые компоненты, не подозревая об этом: вы создали нечто
полезное, поделились своим результатом с приятелем, и вскоре у в ас будет уже с полдюжины
пользователей. С этого момента вы лишаетесь возможности свободно менять этот АР! и получаете
благодарности за все те усилия, которые потратили на его разработку, когда писали программу в
первый раз.
Мое особое внимание к разработке АР! может показаться несколько противоестественным для
ярых приверженцев новых облегченных методик создания программного обеспечения, таких как
"Экстремальное программирование[B" e ck99]. В этих методиках особое значение придается написанию
самой простой программы, какая только сможет работать. Если вы пользуетесь одной из этих методик,
то обнаружите, что внимание к АРI сослужит вам добрую службу в процессе последующей перестройки
программы (refactoring). Основной задачей перестроения является усовершенствование структуры
системы, а также исключение дублирующего программного кода. Этой цели невозможно достичь, если
у компонентов системы нет хорошо спроектированного API.
Ни один язык не идеален, но некоторые - великолепны. Я обнаружил, что язык программирования
Java и его библиотеки в огромной степени способствуют повышению качества и производительности
труда, а также доставляют радость при работе с ними. Надеюсь, эта книга отражает мой энтузиазм и
способна сделать вашу работу с языком Java более Эффективной и приятной.